{
  // Place your snippets for typescriptreact here. Each snippet is defined under a snippet name and has a prefix, body and
  // description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
  // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the
  // same ids are connected.
  // Example:
  // "Print to console": {
  // 	"prefix": "log",
  // 	"body": [
  // 		"console.log('$1');",
  // 		"$2"
  // 	],
  // 	"description": "Log output to console"
  // }
  "reactTypeScriptFunctionMemoComponent": {
    "prefix": "rtmc",
    "body": [
      "import React, { memo } from \"react\"",
      "import type { ReactNode, FC } from \"react\"",
      "",
      "interface IProps {",
      "  children?: ReactNode",
      "}",
      "",
      "const ${1:Template}: FC<IProps> = () => {",
      "  return <div>${1:Template}</div>",
      "}",
      "",
      "export default memo(${1:Template})"
    ],
    "description": "reactTypeScriptFunctionMemoComponent"
  },
  "reactTypeScriptClassPureComponent": {
    "prefix": "rtpc",
    "body": [
      "import React, { PureComponent } from \"react\"",
      "import type { ReactNode } from \"react\"",
      "",
      "interface IProps {",
      "  children?: ReactNode",
      "}",
      "interface IState {}",
      "",
      "class ${1:Template} extends PureComponent<IProps, IState> {",
      "  constructor(props: IProps) {",
      "    super(props)",
      "    this.state = {}",
      "  }",
      "",
      "  render(): ReactNode {",
      "    return <div>${1:Template}</div>",
      "  }",
      "}",
      "",
      "export default ${1:Template}"
    ],
    "description": "reactTypeScriptClassPureComponent"
  }
}
